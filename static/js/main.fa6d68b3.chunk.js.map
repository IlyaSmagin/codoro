{"version":3,"sources":["logic/usePhrase.js","logic/useDocTitle.js","logic/useTimer.js","App.js","reportWebVitals.js","index.js"],"names":["phrases","init","wait","work","reset","edit","getPhrase","type","Math","floor","random","useDocTitle","title","useState","docTitle","setDocTitle","useEffect","document","useTimer","initTime","timeLeft","setTimeLeft","setTitle","isRunning","setIsRunning","buttonTitle","setbuttonTitle","intervalRef","useRef","timeRemaining","calcTimeString","startTimer","current","setInterval","resetTimer","stopTimer","clearInterval","editTimer","newTime","time","padTime","toString","padStart","left","minutes","seconds","App","setTime","isEdited","setIsEdited","handleEdit","className","onClick","value","name","onChange","event","persist","Number","target","console","log","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fa6d68b3.chunk.js","sourcesContent":["const phrases = {\r\n  init: [\r\n    \"Think before write!\",\r\n    \"Compose mindfully!\",\r\n    \"Find a fresh approach\",\r\n    \"Keep calm and carry on\",\r\n    \"Just do it\",\r\n    \"Beginnig is here\",\r\n    \"Ready to go?\",\r\n    \"It's time to start!\",\r\n    \"Start a habbit\",\r\n    \"3, 2, 1... Code!\",\r\n  ],\r\n  wait: [\r\n    \"Keep it up!\",\r\n    \"Let your eyes rest\",\r\n    \"Wait a minute\",\r\n    \"Think about it\",\r\n    \"Finish what you started!\",\r\n    \"You may need to continue\",\r\n    \"The only thing stoping you is you\",\r\n    \"Finish what you started!\",\r\n    \"Ready to continue?\",\r\n    \"Are you done already?\",\r\n  ],\r\n  work: [\r\n    \"You are doing great!\",\r\n    \"Stay focused\",\r\n    \"Do not forget why you here\",\r\n    \"Concentrate on your goal\",\r\n    \"It's not finished yet\",\r\n    \"Keep coding!\",\r\n    \"Do not stop\",\r\n    \"Till the end\",\r\n    \"Keep it up\",\r\n    \"Do not lose your approach!\",\r\n  ],\r\n  reset: [\r\n    \"Ready for another?\",\r\n    \"Go again?\",\r\n    \"Practice makes perfect\",\r\n    \"The result is irrelevant if the effort was there\",\r\n    \"Do not lose the macro, focus on the micro\",\r\n    \"Press start\",\r\n    \"Turn a new leaf\",\r\n    \"Never surrrender\",\r\n    \"Never stop forever\",\r\n    \"Find a new angle!\",\r\n  ],\r\n  edit: [\r\n    \"Input custom time frame\",\r\n    \"Change a pace\",\r\n    \"Find your rhythm\",\r\n    \"Adapt tool to your needs\",\r\n    \"Choose your tempo\",\r\n    \"One step at a time\",\r\n    \"Timer starts with 0\",\r\n    \"Don't go negative\",\r\n    \"Time your work\",\r\n    \"Keep it short\",\r\n  ],\r\n};\r\nexport function getPhrase(type) {\r\n  return phrases[type][Math.floor(Math.random() * 10)];\r\n}\r\n","import { useEffect, useState } from \"react\";\r\n\r\nfunction useDocTitle(title) {\r\n  const [docTitle, setDocTitle] = useState(title);\r\n  useEffect(() => {\r\n    document.title = docTitle;\r\n  }, [docTitle]);\r\n\r\n  return setDocTitle;\r\n}\r\n\r\nexport default useDocTitle;\r\n","import { useState, useRef } from \"react\";\r\nimport { getPhrase } from \"./usePhrase\";\r\nimport useDocTitle from \"./useDocTitle\";\r\nfunction useTimer(initTime = 20) {\r\n  const [timeLeft, setTimeLeft] = useState(initTime * 60);\r\n  const [title, setTitle] = useState(getPhrase(\"init\"));\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [buttonTitle, setbuttonTitle] = useState(\"Start\");\r\n  const setDocTitle = useDocTitle(\"Codoro\");\r\n  const intervalRef = useRef(null);\r\n  const timeRemaining = calcTimeString(timeLeft);\r\n\r\n  function startTimer() {\r\n    if (intervalRef.current !== null) return;\r\n    setTitle(getPhrase(\"work\"));\r\n    setIsRunning(true);\r\n    intervalRef.current = setInterval(() => {\r\n      setTimeLeft((timeLeft) => {\r\n        setDocTitle(calcTimeString(timeLeft - 1));\r\n        if (timeLeft >= 1) return timeLeft - 1;\r\n        resetTimer();\r\n        return 0;\r\n      });\r\n    }, 1000);\r\n  }\r\n  function stopTimer() {\r\n    if (intervalRef.current === null) return;\r\n    clearInterval(intervalRef.current);\r\n    intervalRef.current = null;\r\n    setTitle(getPhrase(\"wait\"));\r\n    setbuttonTitle(\"Continue\");\r\n    setIsRunning(false);\r\n    setDocTitle(timeRemaining + \" (paused)\");\r\n  }\r\n  function editTimer(newTime = initTime) {\r\n    stopTimer();\r\n    setTitle(getPhrase(\"edit\"));\r\n    setbuttonTitle(\"Save\");\r\n    setTimeLeft(newTime * 60);\r\n    setDocTitle(\"Editing timer\");\r\n  }\r\n  function resetTimer(time = initTime) {\r\n    setTitle(getPhrase(\"reset\"));\r\n    setbuttonTitle(\"Start\");\r\n    setTimeLeft(time * 60);\r\n    setDocTitle(\"Start again\");\r\n  }\r\n  function padTime(time) {\r\n    return time.toString().padStart(2, \"0\");\r\n  }\r\n  function calcTimeString(left) {\r\n    const minutes = padTime(Math.floor(left / 60));\r\n    const seconds = padTime(left - minutes * 60);\r\n    const timeRemaining = `${minutes}:${seconds}`;\r\n    return timeRemaining;\r\n  }\r\n\r\n  return [\r\n    { timeRemaining, title, buttonTitle },\r\n    isRunning,\r\n    { startTimer, stopTimer, resetTimer, editTimer },\r\n  ];\r\n}\r\nexport default useTimer;\r\n","import \"./App.css\";\nimport { useState } from \"react\";\nimport useTimer from \"./logic/useTimer\";\n\nfunction App() {\n  const [time, setTime] = useState(20);\n  const [isEdited, setIsEdited] = useState(false);\n  const [\n    { timeRemaining, title, buttonTitle },\n    isRunning,\n    { startTimer, stopTimer, resetTimer, editTimer },\n  ] = useTimer(time);\n  const handleChange = (event) => {\n    event.persist();\n    const newTime = Number(event.target.value);\n    if (newTime < 0) {\n      console.log(\"Hey, be careful with negative time!\");\n      setTime(1);\n    } else {\n      setTime(newTime);\n    }\n  };\n  function handleEdit() {\n    editTimer(time);\n    if (isEdited) {\n      resetTimer(time);\n      if (time <= 0) {\n        setTime(1);\n        resetTimer(1);\n      }\n    }\n\n    setIsEdited(() => !isEdited);\n  }\n  function handleReset() {\n    resetTimer(time);\n    if (isEdited) {\n      setIsEdited(() => !isEdited);\n      if (time <= 0) {\n        setTime(1);\n        resetTimer(1);\n      }\n    }\n  }\n  return (\n    <div className=\"App\">\n      <h2 className=\"title\">{title}</h2>\n      <div className=\"timer\">\n        {!isEdited && <span onClick={handleEdit}>{timeRemaining}</span>}\n        {isEdited && (\n          <>\n            <input\n              className=\"timeInput\"\n              type=\"number\"\n              value={time}\n              name=\"time\"\n              onChange={handleChange}\n            />\n            <span className=\"timeLabel\">min</span>\n          </>\n        )}\n      </div>\n      <div className=\"btn-container\">\n        {!isRunning && (\n          <button className=\"btn\" onClick={isEdited ? handleEdit : startTimer}>\n            {buttonTitle}\n          </button>\n        )}\n        {isRunning && (\n          <button\n            className=\"btn\"\n            color=\"secondary\"\n            onClick={isEdited ? handleEdit : stopTimer}\n          >\n            Pause\n          </button>\n        )}\n        <button className=\"btn\" color=\"default\" onClick={handleReset}>\n          Reset\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/reset.css\";\nimport \"./css/index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}